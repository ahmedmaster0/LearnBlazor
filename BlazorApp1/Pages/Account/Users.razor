@page "/users"
@attribute [Authorize(Roles = "Admin")]

@using BlazorApp1.ViewModels
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

<table class="table table-active table-bordered table-hover">
    <thead>
        <tr>
            <th>Id</th>
            <th>Email</th>
            <th>Full Name</th>
            <th>Phone</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @if (lst_users is null)
        {
            <tr>
                <td colspan="12">
                    <div class="alert alert-warning text-center"> Loading ......  </div>
                </td>
            </tr>
        }
        else
        {
            @foreach (var item in lst_users)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Email</td>
                    <td>@item.FullName</td>
                    <td>@item.Phone</td>
                    <td>
                        <AuthorizeView Policy="CanEditUser">
                            <button class="btn btn-sm btn-primary" @onclick="() => EditUser(item.Id)"> Edit</button>
                        </AuthorizeView>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => GetPermissions(item.Id)"> Add Permission</button>
                    </td>
                    <td>
                        <AuthorizeView Roles="Admin" Policy="CanDeleteUser">
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(item.Id)"> Delete</button>
                        </AuthorizeView>
                        
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<CustomLoading IsLoading="@_isLoading"></CustomLoading>

@if (CanEdit)
{
    <EditForm Model="edituserDTO" OnValidSubmit="EditPostUser">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="row">
            <label class="form-label" for="email">Email</label>
            <input class="form-control" id="email" @bind="edituserDTO.Email" />
            <ValidationMessage For="() => edituserDTO.Email"></ValidationMessage>
        </div>
        <div class="row">
            <label class="form-label" for="FullName">Full Name</label>
            <input class="form-control" id="FullName" @bind="edituserDTO.FullName" />
            <ValidationMessage For="() => edituserDTO.FullName"></ValidationMessage>
        </div>
        <div class="row">
            <label class="form-label" for="Phone">Phone</label>
            <input class="form-control" id="Phone" @bind="edituserDTO.Phone" />
            <ValidationMessage For="() => edituserDTO.Phone"></ValidationMessage>
        </div>
        <button type="submit" class="btn btn-primary mt-20">Edit User</button>
    </EditForm>
}

@code {

    public bool _isLoading { get; set; } = false;

    public EditUserDTO edituserDTO { get; set; } = new();
    public List<UserDTO> lst_users { get; set; } = new();

    [Parameter]
    public bool CanEdit { get; set; } = false;


    [Inject] UserManager<ApplicationUser> userManager { get; set; }
    [Inject] SweetAlertService sweetAlert { get; set; }
    [Inject] NavigationManager navigationManager { get; set; }
    [Inject] ApplicationContext context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await GetUsers();
        ShowSpinner(false);
    }
    private void ShowSpinner(bool isLoading)
    {
        _isLoading = isLoading;
        StateHasChanged();
    }

    private async Task GetUsers()
    {
        lst_users.Clear();
        lst_users.AddRange(await userManager.Users.Select(m => new UserDTO
            {
                Id = m.Id,
                Email = m.Email,
                FullName = m.FullName,
                Phone = m.PhoneNumber
            }).ToListAsync());
    }

    private async Task DeleteUser(string Id)
    {
        _isLoading = true;

        ApplicationUser applicationUser = await userManager.FindByIdAsync(Id);
        IdentityResult identityResult = await userManager.DeleteAsync(applicationUser);
        if (identityResult.Succeeded)
        {
            ShowSpinner(false);
            var alert = await sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "Deleted Successfully",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "Ok"
                });
            if (alert.IsConfirmed)
            {
                await GetUsers();
            }
        }
        else
        {
            ShowSpinner(false);
            await sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = identityResult.Errors.FirstOrDefault().Description,
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Ok"
                });
        }

    }

    private async Task EditUser(string Id)
    {
        _isLoading = true;

        ApplicationUser applicationUser = await userManager.FindByIdAsync(Id);
        edituserDTO.Id = applicationUser.Id;
        edituserDTO.Email = applicationUser.Email;
        edituserDTO.FullName = applicationUser.FullName;
        edituserDTO.Phone = applicationUser.PhoneNumber;



        CanEdit = true;
        ShowSpinner(false);
    }

    private async Task EditPostUser()
    {
        try
        {
            _isLoading = true;

            ApplicationUser applicationUser = await userManager.FindByIdAsync(edituserDTO.Id);
            applicationUser.Email = edituserDTO.Email;
            applicationUser.FullName = edituserDTO.FullName;
            applicationUser.PhoneNumber = edituserDTO.Phone;

            var result = await userManager.UpdateAsync(applicationUser);
            if (result.Succeeded)
            {
                CanEdit = false;
                ShowSpinner(false);
                var alert = await sweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Edited Successfully",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonText = "Ok"
                    });
                if (alert.IsConfirmed)
                {
                    await GetUsers();
                }
            }
            else
            {
                ShowSpinner(false);
                await sweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "errorrrrrrrrrs",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Ok"
                    });
            }
        }
        catch (Exception e)
        {
            ShowSpinner(false);
            await sweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = e.Message,
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Ok"
                });
        }

    }

    private void GetPermissions(string userId){
        navigationManager.NavigateTo($"/Permissions/{userId}");
    }
}
